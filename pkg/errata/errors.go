// Package errata is auto-generated by errata
// Version: 6bdf8ea83dbf7cd995c7a0e04c567409
package errata

import (
	"crypto/sha1"
	"fmt"
	"time"
)

type Error struct {
	Code       string
	Message    string
	Cause      string
	Categories []string
	Args       []interface{}
	Labels     map[string]string
	Guide      string

	uuid    string
	wrapped error
}

func (e Error) Unwrap() error {
	return e.wrapped
}

func (e Error) UUID() string {
	if e.uuid == "" {
		e.uuid = generateReference(e.Code)
	}
	return e.uuid
}

func (e Error) Error() string {
	return fmt.Sprintf(e.Message, e.Args...)
}

const (
	ErrLabelNameTooLong = "label-name-too-long"
)

var list = map[string]Error{
	ErrLabelNameTooLong: {
		Code:       ErrLabelNameTooLong,
		Message:    `Label "%.200s" length exceeds the defined limit in series "%.200s"`,
		Cause:      `Received a series whose label name length exceeds the limit`,
		Categories: []string{"validation", "label"},
		Labels: map[string]string{
			"http_response_code": "400",
			"level":              "warning",
		},
		Guide: `file://guides/label-name-too-long.md`,
	},
}

func NewFromCode(code string, wrapped error) Error {
	err := list[code]
	err.wrapped = wrapped
	return err
}

func generateReference(code string) string {
	return fmt.Sprintf("%x", sha1.Sum([]byte(code+time.Now().Format(time.RFC3339Nano))))
}

func NewLabelNameTooLongErr(wrapped error, label string, series string) Error {
	err := NewFromCode(ErrLabelNameTooLong, wrapped)
	err.Args = []interface{}{label, series}
	return err
}
